'''
ТАБЛИЦЫ В ПРОЕКТЕ

Стандартные таблицы Django:

1. auth_group:
        Хранит группы пользователей.
        Группа — это способ объединить пользователей и назначить общие
        разрешения группе, вместо назначения разрешений каждому пользователю
        индивидуально.

2. auth_group_permissions:
        Связывает группу с разрешением.
        Каждое разрешение присваивается конкретной группе.

3. auth_permission:
        Содержит доступные разрешения для моделей приложений.
        Эти разрешения создаются автоматически при создании моделей
        и могут управляться вручную.

4. django_admin_log:
        Ведёт журнал действий пользователей в административной части сайта
        (создание, редактирование, удаление объектов).

5. django_content_type:
        Каждая модель имеет связанный content-type, который используется для
        отслеживания типов объектов, используемых в разрешении и журналировании.

6. django_migrations:
        Управляет историей миграций,
        фиксируя каждое изменение структуры базы данных,
        выполненное командой makemigrations и migrate.

7. django_session:
        Хранилище сессионных данных для зарегистрированных пользователей.
        Каждый сеанс ассоциируется с конкретным пользователем
        и временем истечения срока действия.

== СПЕЦИАЛЬНЫЕ ТАБЛИЦЫ ==

8. users_customuser:
        Ваша собственная таблица для хранения пользовательских данных.
        Эта таблица расширяет стандартную модель пользователя Django,
        позволяя хранить дополнительную информацию
        (например, телефон, PIN-код, аватар).

9. users_customuser_group:
        Определяет связь между пользователями и группами.
        Один пользователь может принадлежать нескольким группам одновременно.

10. users_customuser_user_permissions:
        Прямая привязка конкретных разрешений к пользователям, минуя группы.
        Используется редко, чаще применяется работа через группы.
=========================
Зачем нужны эти таблицы в вашем приложении?
Эти таблицы необходимы для полноценного функционирования механизма аутентификации и авторизации в Django. Без них было бы невозможно назначать права доступа пользователям, отслеживать активность в административной панели, управлять группами и разрешениями.

Они позволяют:

Организовать гибкую систему контроля доступа к ресурсам приложения.

Автоматически вести историю изменений (логирование).

Удобно добавлять или изменять права пользователей без вмешательства в код.
Поэтому важно оставить эти таблицы нетронутыми и пользоваться ими
для повышения уровня безопасности и удобочитаемости вашего приложения.
'''