По вашему запросу приведу обновлённую структуру проекта с учётом новых принципов маршрутизации в Next.js 13+ и раздельного хранения клиентской и серверной частей.

### Новая структура проекта:

```
my-bathhouse-app/
├── backend/                               # Серверная часть (Django)
│   ├── env/                               # Виртуальное окружение Python
│   │   ├── Include/                      # Файлы заголовков для компилятора
│   │   ├── Lib/                          # Библиотеки виртуального окружения
│   │   ├── Scripts/                      # Скрипты виртуального окружения
│   │   └── pyvenv.cfg                   # Конфигурационный файл виртуального окружения
│   │
│   ├── my-bathhouse-backend/             # Основной пакет Django-проекта
│   │   ├── apps/                         # Приложения проекта
│   │   │   ├── users/                    # Приложение пользователей
│   │   │   │   ├── migrations/          # Миграции базы данных
│   │   │   │   │   └── __init.py__       # Пустой инициализационный файл
│   │   │   │   ├── __init.py__           # Пустой инициализационный файл
│   │   │   │   ├── admin.py              # Административная панель
│   │   │   │   ├── apps.py               # Конфигурация приложения
│   │   │   │   ├── models.py             # Модели данных
│   │   │   │   ├── tests.py              # Тесты приложения
│   │   │   │   └── views.py              # Представления (контроллеры)
│   │   │   │
│   │   │   ├── __init.py__               # Пустой инициализационный файл
│   │   │   └── ...                       # Другие приложения
│   │   ├── __init.py__                   # Пустой инициализационный файл
│   │   ├── asgi.py                       # ASGI конфигурация
│   │   ├── settings.py                   # Настройки Django
│   │   ├── urls.py                       # Маршруты URL
│   │   └── wsgi.py                       # WSGI конфигурация
│   │   ...
│   └── manage.py                         # Утилита командной строки для управления проектом
│
├── frontend/                              # Клиентская часть (Next.js)
│   ├── .next                              # Сгенерированные Next.js файлы
│   ├── node_modules                       # Установленные зависимости npm/pnpm
│   ├── public/                            # Открытые статичные файлы
│   │   ├── favicon.ico                    # Фавиконка сайта
│   │   ├── static-images/                 # Статичные изображения
│   │   │   ├── banners/                   # Баннеры
│   │   │   ├── logos/                     # Логотипы
│   │   │   └── others/                    # Остальные изображения
│   │   └── svgs/                          # SVG файлы
│   │       ├── file.svg
│   │       ├── globe.svg
│   │       ├── next.svg
│   │       ├── vercel.svg
│   │       ├── window.svg
│   │       ├── calendar-icon.svg          # Календарный иконка
│   │       ├── clock-icon.svg             # Часовая иконка
│   │       └── pin-icon.svg               # Иконка булавки
│   │
│   ├── src/                               # Исходники фронтенда
│   │   ├── app/                           # Роуты и страницы
│   │   │   ├── account/                   # Маршрут "/account"
│   │   │   │   ├── page.tsx               # Страница аккаунта
│   │   │   │   └── loading.tsx            # Экраны загрузки
│   │   │   ├── login/                     # Маршрут "/login"
│   │   │   │   ├── page.tsx               # Страница входа
│   │   │   │   └── loading.tsx            # Экран загрузки
│   │   │   ├── dashboard/                 # Маршрут "/dashboard"
│   │   │   │   ├── page.tsx               # Панель приборов
│   │   │   │   ├── loading.tsx            # Экран загрузки
│   │   │   │   ├── profile/               # Вложенная страница "/dashboard/profile"
│   │   │   │   │   ├── page.tsx           # Профиль пользователя
│   │   │   │   │   └── loading.tsx        # Экран загрузки
│   │   │   │   └── settings/              # Вложенная страница "/dashboard/settings"
│   │   │   │       ├── page.tsx           # Настройки пользователя
│   │   │   │       └── loading.tsx        # Экран загрузки
│   │   │   ├── layouts/                   # Макеты страниц
│   │   │   │   ├── DefaultLayout.tsx      # Основной макет
│   │   │   │   └── DashboardLayout.tsx    # Макет панели инструментов
│   │   │   ├── api/                       # API-маршруты
│   │   │   │   ├── hello/                 # GET-запросы к "/api/hello"
│   │   │   │   │   ├── route.ts           # Обработчик запросов
│   │   │   │   └── user/                  # POST-запросы к "/api/user"
│   │   │   │       ├── route.ts           # Обработчик запросов
│   │   │   ├── not-found.tsx              # Страница "не найдено"
│   │   │   ├── globals.css                # Глобальные стили
│   │   │   └── style-dictionary.json      # Словарь стилей
│   │   │
│   │   ├── components/                    # Компоненты
│   │   │   ├── auth/                      # Авторизация
│   │   │   │   ├── RegisterForm.tsx      # Форма регистрации
│   │   │   │   └── RegisterForm.module.css # Стили формы регистрации
│   │   │   ├── forms/                     # Формы
│   │   │   │   ├── CustomCheckbox.tsx     # Пользовательский чекбокс
│   │   │   │   └── CustomCheckbox.module.css # Стили чекбокса
│   │   │   ├── layout/                    # Макеты
│   │   │   │   └── Main.tsx               # Основное оформление
│   │   │   ├── modals/                    # Модальные окна
│   │   │   │   └── Modal.tsx              # Базовый модал
│   │   │   ├── navigation/                # Навигация
│   │   │   │   ├── Header.tsx             # Заголовок
│   │   │   │   ├── Sidebar.tsx            # Боковая панель
│   │   │   │   └── Breadcrumb.tsx         # Хлебные крошки
│   │   │   ├── shared/                    # Совместно используемые компоненты
│   │   │   │   └── VerifyPin.tsx          # Верификация PIN-кода
│   │   │   ├── ui-kit/                    # Набор UI-компонентов
│   │   │   │   ├── Button.tsx             # Кнопка
│   │   │   │   ├── Clock.tsx              # Часы
│   │   │   │   ├── StyledCalendar.tsx     # Оформленный календарь
│   │   │   │   └── Card.tsx               # Карточка
│   │   │   └── CalendarWrapper.tsx        # Обёртка календаря
│   │   │
│   │   ├── contexts/                      # Контексты
│   │   │   └── auth.ts                    # Контекст аутентификации
│   │   │
│   │   ├── hooks/                         # Кастомные хуки
│   │   │
│   │   ├── lib/                           # Библиотека функционала
│   │   │
│   │   ├── styles/                        # Стили
│   │   │   ├── globals.css                # Глобальные стили
│   │   │   ├── components/               # Стили компонентов
│   │   │   │   ├── Button.module.css     # Стили кнопки
│   │   │   │   ├── Form.module.css       # Стили форм
│   │   │   │   └── Header.module.css     # Стили заголовка
│   │   │   ├── pages/                     # Стили страниц
│   │   │   │   ├── Account.module.css    # Стили страницы аккаунта
│   │   │   │   ├── Login.module.css      # Стили страницы входа
│   │   │   │   ├── Page.module.css
│   │   │   │   └── Profile.module.css    # Стили страницы профиля
│   │   │   ├── themes/                    # Темы оформления
│   │   │   │   ├── light.css             # Светлая тема
│   │   │   │   └── dark.css              # Тёмная тема
│   │   │   └── index.css                 # Главный файл стилей
│   │   │
│   │   ├── types.d.ts                     # Определения типов
│   │   ├── utils/                         # Различные утилиты
│   │   └── index.tsx                      # Главная точка входа
│   │
│   ├── .gitignore                         # Игнорирование файлов Git'ом
│   ├── eslint.config.mjs                  # Конфигурация ESLint
│   ├── jsonfig.json                       # Конфигурация JSON
│   ├── next.config.js                     # Конфигурация Next.js
│   ├── next.env.d.ts                      # Типы среды Next.js
│   ├── package.json                       # Пакетный менеджер
│   ├── package-lock.json                  # Лок-файл зависимостей
│   ├── pnpm-lock.yaml                     # Лок-файл зависимостей pnpm
│   ├── postcss.config.js                  # Конфигурация PostCSS
│   ├── README.md                          # Описание проекта
│   ├── tailwind.config.js                 # Конфигурация Tailwind CSS
│   └── tsconfig.json                      # Конфигурация TypeScript
│
├── media/                                 # Media файлы (аватары, изображения)
│   └── avatars/                           # Каталог для аватаров
│
├── .editorconfig                          # Редакторские настройки
├── .gitignore                             # Игнорирование файлов Git'ом
├── LICENSE                                # Лицензия проекта
├── my_structur_files.txt                  # Файл описания структуры
├── README.md                              # Главное руководство
├── README-instruction.txt                 # Инструкция к проекту
├── structure.txt                          # Структура файлов
└── .gitignore                             # Игнорирование файлов Git'ом
```

### Объяснение структуры:

- **frontend/src/** — главная директория фронтенда, организованная по принципам Next.js 13+. Все страницы находятся в папке `app`, разбитые по маршрутам.
- **backend/my-bathhouse-backend/** — основная папка серверной части Django-приложения, где содержатся модели, представления, миграции и административные инструменты.
- **media/avatars/** — каталог для медиа-ресурсов, таких как аватары пользователей.
- **public/static-images/** — публичные статичные ресурсы, доступные браузеру.

Эта структура обеспечивает четкое разделение ответственности между клиентом и сервером, улучшает читаемость и облегчает дальнейшую поддержку и развитие проекта.

====================================

Файл `loading.tsx` в структуре проекта служит для реализации экранов загрузки, которые отображаются во время перехода между страницами или выполнения асинхронных операций, таких как получение данных с сервера.

### Зачем нужен файл `loading.tsx`?

Когда пользователь открывает ссылку на сайт или переходит между страницами, иногда загрузка данных занимает некоторое время. Вместо пустого экрана или долгого ожидания браузер показывает индикатор загрузки («spinner»), пока контент загружается. Таким образом улучшается пользовательский опыт, так как посетитель получает визуальную обратную связь о происходящем процессе.

### Примеры использования:

- **Переходы между страницами:** Во время навигации между разными путями (например, переход с главной страницы на профиль) загрузочный экран появляется до полной готовности следующего контента.
- **Загрузка данных:** Например, при отправке запроса на сервер для получения списка товаров, пока список загружается, отображается анимация ожидания.

### Содержимое файла `loading.tsx`

Обычно файл `loading.tsx` содержит простую анимацию или текстовую надпись, сигнализирующую о загрузке. Например:

```tsx
// app/login/loading.tsx

import React from 'react';

const Loading = () => {
  return (
    <div className="w-full h-screen flex justify-center items-center text-gray-500">
      <span className="animate-pulse">Loading...</span>
    </div>
  );
};

export default Loading;
```

Или с простой анимированной фигурой:

```tsx
// app/dashboard/loading.tsx

import React from 'react';

const Loading = () => {
  return (
    <div className="w-full h-screen flex justify-center items-center">
      <svg className="animate-spin h-12 w-12 text-gray-500" viewBox="0 0 24 24">
        <circle cx="12" cy="12" r="10"></circle>
      </svg>
    </div>
  );
};

export default Loading;
```

### Где использовать экраны загрузки?

- В любом разделе, где возможен заметный промежуток времени между запросом и ответом от сервера.
- Между переключениями страниц, когда ресурс не мгновенно доступен.
- В любых формах отправки данных, ожидающих подтверждения результата операции.

### Важность хорошего UX:

Хороший дизайн экрана загрузки помогает уменьшить разочарование пользователей, когда приложение медленно откликается. Лучше показать понятный сигнал о том, что идёт работа над данным процессом, чем заставлять пользователя гадать, почему ничего не происходит.

---

Следуя рекомендациям и правильным внедрением экранов загрузки, вы улучшите восприятие производительности вашего веб-сайта пользователями, повысите удобство пользования вашим приложением и уменьшите количество отказов из-за задержек загрузки.

==============================

Список страниц:Табель : страница для незарегистрированного пользователяТабель : страница для зарегистрированного пользователяТайминг всех мастеров : на заданную датуТайминг одного мастера : на неделю вперед от текущей даты и карточка зарплат выплаченных и невыплаченных.Архив программ сеансов с музыкальным плеером. Внутри свой список меню программ из архива.Отчёт мастера : Вносит после выполненных работ.Отчёт администратора со своим калькулятором разных ячеек в таблице.Таблицы всего коллектива работников и их должностей.Таблицы всего коллектива для администратора с зарплатами.
------------------------------
Предлагаю следующую организацию папок и страниц, учитывая лучшие практики маршрутизации и проектирования в Next.js. Каждая папка должна отражать смысл своей страницы, чтобы было легко ориентироваться и поддерживать проект.

### Предлагаемая структура папок:

```
/app
├── dashboard/                         # Панель инструментов
│   ├── timetable-guest/      =         # Табель для незарегистрированных пользователей
│   │   ├── page.tsx
│   │   └── loading.tsx
│   |

│   ├── timetable-user/       =         # Табель для зарегистрированных пользователей
│   │   ├── page.tsx
│   │   └── loading.tsx
│   |

│   ├── timing-all-masters/   =         # Тайминги всех мастеров на заданную дату
│   │   ├── page.tsx
│   │   └── loading.tsx
│   |

│   ├── timing-one-master/      =       # Тайминги одного мастера на неделю вперёд
│   │   ├── week-ahead/        =        # Тайминги на неделю вперед
│   │   │   ├── page.tsx
│   │   │   └── loading.tsx
│   │   |
│   │   ├── salaries/                  # Карточка выплаты зарплаты
│   │   │   ├── payment-status/        # Информация о статусе платежа
│   │   │   │   ├── paid-page.tsx      # Зарплата выплачена
│   │   │   │   ├── unpaid-page.tsx    # Зарплата не выплачена
│   │   │   │   └── loading.tsx
│   │   │   |
│   │   │   ├── daily/                 # Информация о дневном доходе
│   │   │   │   ├── salary-day.tsx
│   │   │   │   └── loading.tsx
│   │   │   |
│   │   │   ├── service-based/         # Доход по услугам
│   │   │   │   ├── salary-service.tsx
│   │   │   │   └── loading.tsx
│   │   │   |
│   │   │   ├── monthly/               # Ежемесячный заработок
│   │   │   │   ├── salary-month.tsx
│   │   │   │   └── loading.tsx
│   │   │   |
│   │   │   ├── periodical/            # Периодический заработок
│   │   │   │   ├── salary-period.tsx
│   │   │   │   └── loading.tsx
│   │   │   |
│   │   │   ├── yearly/                 # Годовой заработок
│   │   │   │   ├── salary-year.tsx
│   │   │   │   └── loading.tsx
│   │   │   |
│   │   │   ├── page.tsx               # Общая страница зарплат
│   │   │   └── loading.tsx
│   │   |
│   │   ├── page.tsx                   # Общая страница тайминга одного мастера
│   │   └── loading.tsx
│   |

│   ├── archive-programs/       =       # Архив программ сеансов с музыкальным плеером
│   │   ├── menu-list/          =       # Внутренний список меню программ
│   │   │   ├── page.tsx
│   │   │   └── loading.tsx
│   │   |
│   │   ├── player/             =       # Музыкальный плеер архивных программ
│   │   │   ├── page.tsx
│   │   │   └── loading.tsx
│   │   |
│   │   ├── page.tsx                   # Главная страница архива программ
│   │   └── loading.tsx
│   |

│   ├── report-master/         =        # Отчёт мастера после выполнения работ
│   │   ├── page.tsx
│   │   └── loading.tsx
│   |

│   ├── report-administrator/   =       # Отчёт администратора с калькулятором таблиц
│   │   ├── calculator/         =       # Калькулятор расчёта разных ячеек таблицы
│   │   │   ├── page.tsx
│   │   │   └── loading.tsx
│   │   |
│   │   ├── page.tsx                   # Основная страница отчёта администратора
│   │   └── loading.tsx
│   |

│   ├── staff-table/            =       # Таблица сотрудников и их должностей
│   │   ├── calculator/         =       # Калькулятор расчёта разных ячеек таблицы
│   │   │   ├── page.tsx
│   │   │   └── loading.tsx
│   │   ├── page.tsx
│   │   └── loading.tsx
│   |

│   ├── salary-staff-table/            # Таблица коллективов зарплат администратору
│   │   ├── page.tsx
│   │   └── loading.tsx
│   |

│   ├── page.tsx                       # Главная страница панели инструментов
│   └── loading.tsx
```

### Названия папок:

1. **timetable-guest**: Страница табеля для незарегистрированных пользователей.
2. **timetable-user**: Страница табеля для зарегистрированных пользователей.
3. **timing-all-masters**: Тайминги всех мастеров на определённую дату.
4. **timing-one-master**: Тайминги конкретного мастера на неделю вперёд, включая карточки зарплат.
5. **archive-programs**: Архив программ сеансов с музыкальным плеером и внутренним списком меню.
6. **report-master**: Отчёт мастера после завершения работы.
7. **report-administrator**: Отчёт администратора с собственным калькулятором ячеек таблицы.
8. **staff-table**: Таблица всего персонала и их должностей.
9. **salary-staff-table**: Полная таблица сотрудников с информацией о зарплате для администратора.

### Рекомендации:

- Добавляйте подпапки только тогда, когда это необходимо для улучшения ясности и структуры.
- Каждый важный функциональный модуль лучше выделять отдельной папкой.
- Избегайте чрезмерного количества уровней вложенности, чтобы упростить понимание структуры проекта.

Такая организация сделает ваш проект удобным для разработчиков и обеспечит лёгкость масштабирования и дальнейшего развития.
=============================================
Основной файл `page.tsx` внутри папки `dashboard` играет роль центральной точки взаимодействия с основными функциями панели инструментов. Его задача состоит в том, чтобы предоставить пользователю основное представление панели и обеспечить удобное перемещение между ключевыми разделами.

### Основные функции основного файла `page.tsx`:

1. **Навигационная панель**: Предоставляет удобные способы перемещения между всеми важными частями панели (табелями, отчетами, таблицами сотрудников и т.д.).

2. **Главное приветствие или информативное сообщение**: Сообщает пользователю о назначении панели инструментов и даёт общее представление о доступных функциях.

3. **Динамическое отображение содержимого**: Может использоваться для выбора и отображения основных данных, относящихся ко всему сайту или панели в целом.

4. **Центральный контейнер**: Содержит логику маршрутизации и отображения дочерних страниц и компонентов.

### Пример базовой структуры `page.tsx`:

```tsx
// app/dashboard/page.tsx

import React from 'react';
import Link from 'next/link';

const DashboardPage = () => {
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-semibold mb-4">Панель инструментов Бани</h1>
      
      <nav className="mb-8">
        <ul className="flex gap-4">
          <li><Link href="/dashboard/timetable-guest">Табель гостей</Link></li>
          <li><Link href="/dashboard/timetable-user">Табель пользователей</Link></li>
          <li><Link href="/dashboard/timing-all-masters">Тайминги всех мастеров</Link></li>
          <li><Link href="/dashboard/timing-one-master">Тайминги одного мастера</Link></li>
          <li><Link href="/dashboard/archive-programs">Архив программ</Link></li>
          <li><Link href="/dashboard/report-master">Отчет мастера</Link></li>
          <li><Link href="/dashboard/report-administrator">Отчет администратора</Link></li>
          <li><Link href="/dashboard/staff-table">Сотрудники</Link></li>
          <li><Link href="/dashboard/salary-staff-table">Зарплатная ведомость</Link></li>
        </ul>
      </nav>

      <section className="mt-8">
        <h2 className="text-xl font-medium mb-4">Добро пожаловать в панель инструментов!</h2>
        <p>Используйте навигационную панель выше для доступа к основным функциям.</p>
      </section>
    </div>
  );
};

export default DashboardPage;
```

### Какие задачи решает этот подход:

- **Удобство навигации**: Предлагает интуитивно понятный способ перемещения между основными элементами панели.
- **Централизация контента**: Вся ключевая информация представлена централизованно.
- **Логичность структуры**: Каждый компонент расположен в своей собственной области, улучшая организацию и чистоту проекта.

Таким образом, основной файл `page.tsx` действует как центральный узел, откуда начинается путешествие пользователя по панелям инструментов, обеспечивая простоту и эффективность взаимодействия с системой.
-----------------------------------------------------

// Ссылка страницы http://localhost:3000/dashboard.

export default function Page() {
  return <p>Страница : Дашборд</p>;
}