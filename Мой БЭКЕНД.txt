–î–µ–ª–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Next.js (TipeScript) + Django + PostgreSQL_16.
–ó–ê–î–ê–ß–ê: –ù–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –ë–î PostgreSQL_16.
–°—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞, –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –≤ –≤–µ—Ä—Å–∏—é TypeScript (–∫–∞–∫ —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ñ–∞–π–ª–∞—Ö: auth/login/page.tsx; auth/login/LoginForm.tsx; 

–ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨ –¢–û, –ß–¢–û –ò –¢–ê–ö –†–ê–ë–û–¢–ê–ï–¢!!!



===============
–§–†–û–ù–¢–ï–ù–î
===============

—Ñ–ê–ô–õ–´ Next.js TypeScript:
–í–°–ï –ü–ê–ö–ï–¢–´ –£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –§–†–û–ù–¢–ï–ù–î:
PS D:\Projects\my-bathhouse-app\frontend\nextjs-dashboard> pnpm list
Legend: production dependency, optional only, dev only

D:\Projects\my-bathhouse-app\frontend\nextjs-dashboard (PRIVATE)

dependencies:
@heroicons/react 2.2.0        clsx 2.1.1                    react-dom 19.1.0
@tailwindcss/forms 0.5.10     next 15.3.2                   react-hook-form 7.65.0
@tanstack/react-query 5.90.2  next-auth 5.0.0-beta.25       tailwindcss 3.4.17
autoprefixer 10.4.20          postcss 8.5.1                 typescript 5.7.3
axios 1.12.2                  postgres 3.4.6                use-debounce 10.0.4
bcrypt 5.1.1                  react 19.1.0                  zod 3.25.17

devDependencies:
@types/bcrypt 5.0.2
@types/node 22.10.7
@types/react 19.0.7
@types/react-dom 19.0.3
-------------------------------

// frontend/nextjs-dashboard/app/auth/login/page.tsx
'use client';

import React, { useState } from 'react';
import axios from 'axios';
import LoginForm from './LoginForm'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Ñ–æ—Ä–º—É
import SideNav from '@/app/ui/dashboard/sidenav';
import Header from 'app/components/Header'

const LoginPage = () => {
  return (
    <div className="flex h-screen flex-col md:flex-row md:overflow-hidden relative">

      {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å–ª–µ–≤–∞ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ, —Å–Ω–∏–∑—É –Ω–∞ –º–æ–±–∞–π–ª */}
      <div className="w-full flex-none md:w-64 order-last md:order-first  -mt-5">
        <SideNav />
      </div>

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —à–∞–ø–∫–∏ –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */}
      <div className="flex-grow relative overflow-hidden">

        {/* –®–∞–ø–∫–∞, –∑–∞–Ω–∏–º–∞—é—â–∞—è –≤—Å—é —à–∏—Ä–∏–Ω—É —ç–∫—Ä–∞–Ω–∞ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–∞—è —Å–≤–µ—Ä—Ö—É */}
        <Header className="sticky top-0 z-50 bg-gray-800 text-white w-full py-4" />

        {/* –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –∏–º–µ—é—â–µ–µ –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É —Ä–∞–≤–Ω—ã–π –≤—ã—Å–æ—Ç–µ —à–∞–ø–∫–∏ */}
        <main className="p-6 sm:overflow-y-auto md:p-12 pt-[64px]" style={{ paddingTop: '64px' }}>
          {/* {children} */}
          <LoginForm />
        </main>
        
      </div>
    </div>
  );
};

export default LoginPage;
-------------------------

// frontend/nextjs-dashboard/app/auth/login/LoginForm.tsx

import React, { useState } from 'react';
import axios from 'axios';
import { usePathname, useSearchParams, redirect } from 'next/navigation';  // –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ö—É–∫–æ–≤
import LoadingPage from '@/app/auth/login/loading';

// type CredentialsType = {
//   username: string;
//   password: string;
// };

type ApiError = {
  response?: {
    data: {
      detail: string;
    };
  };
};

const LoginForm = () => {
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–≤–æ–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [credentials, setCredentials] = useState({ username: '', password: '' });



  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  const [loading, setLoading] = useState(false);
  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–∞ boolean
  //const [loading, setLoading] = useState<boolean>(false);  üî• –¥–æ–±–∞–≤–∏–ª–∏ —Ç–∏–ø boolean



  // –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.target;
    setCredentials(prevState => ({
      ...prevState,
      [name]: value
    }));
  };

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault(); // –û—Ç–º–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    setLoading(true); // –í–∫–ª—é—á–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏

    // type AuthResponse = {
    //   access_token: string;
    // };

    try {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      const response = await axios.post('/api/login/', credentials);
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
      localStorage.setItem('authToken', response.data.access_token);
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ dashboard
      redirect('/dashboard');
    } catch (error: any & ApiError) {

      console.error('frontend/nextjs-dashboard/app/dashboard/login.tsx (49): –û—à–∏–±–∫–∞:', error);

      if (error.response?.data.detail) {                                       //
        setErrorMessage(error.response.data.detail);                           //

      } else {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        // setErrorMessage('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
        setErrorMessage("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.");
      }
    } finally {
      setLoading(false); // –í—ã–∫–ª—é—á–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    }
  };

  return (
    <>
      {loading && (<LoadingPage />)}
      {!loading && (
        <form onSubmit={handleSubmit} className="max-w-md mx-auto p-6 bg-amber-50 shadow-lg rounded-xl">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <h2 className="text-2xl font-semibold mb-6 text-center text-cyan-950">–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>

          {/* –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
          <div className="mb-4">
            <label
              htmlFor="username"
              className="block text-gray-700 text-sm font-bold mb-2"
            >
              –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
            </label>
            <input
              id="username"
              type="text"
              name="username"
              value={credentials.username}
              onChange={handleChange}
              className="shadow appearance-none border rounded w-full py-2 px-3 bg-stone-100 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-stone-400 focus:border-zinc-600"
            />
          </div>

          {/* –ü–∞—Ä–æ–ª—å */}
          <div className="mb-4">
            <label
              htmlFor="password"
              className="block text-gray-700 text-sm font-bold mb-2"
            >
              –ü–∞—Ä–æ–ª—å:
            </label>
            <input
              id="password"
              type="password"
              name="password"
              value={credentials.password}
              onChange={handleChange}
              className="shadow appearance-none border rounded w-full py-2 px-3 bg-stone-100 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-stone-400 focus:border-zinc-600"
            />
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex justify-between items-center">
            <button
              type="submit"
              disabled={loading}
              className={`bg-sky-500 hover:bg-sky-700 text-white font-bold py-2 px-4 rounded ${loading ? 'opacity-50 cursor-not-allowed' : ''}`}
            >
              {loading ? '–ü–æ–¥–æ–∂–¥–∏—Ç–µ...' : '–í–æ–π—Ç–∏'}
            </button>

            <button
              type="button"
              onClick={() => redirect('/register')}
              disabled={loading}
              className={`bg-slate-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded ${loading ? 'opacity-50 cursor-not-allowed' : ''}`}
            >
              {loading ? '–ü–æ–¥–æ–∂–¥–∏—Ç–µ...' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}
            </button>
          </div>

          {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
          {errorMessage && (
            <p className="mt-4 text-red-900 text-center">{errorMessage}</p>
          )}
        </form>
      )}
    </>
  );
};

export default LoginForm;
-------------------------

// frontend/nextjs-dashboard/app/auth/login/loading.tsx

import React from 'react';
import Image from 'next/image';

const logoPath = "/static-images/logos/logo.png";

// –Ø–≤–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å props
// interface LoadingPageProps {
//   onContinue: () => void; // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
// }

const LoadingPage = () => { // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–ø—Å–æ–≤ (—É–±—Ä–∞—Ç—å)
	return (
// 		<div className="loading-page">
// 			{/* <img src="/images/logo.png" alt="Logo" className="loading-image"/> */}
// 			<Image src={logoPath} width={200} height={100} alt="Logo" className="loading-image" />
// 			<br />
// 			<span>–ó–∞–≥—Ä—É–∑–∫–∞...</span>

//  {/* =============== –ö–ù–û–ü–ö–ê –î–õ–Ø –û–¢–õ–ê–î–ö–ò ==================== */}
// 			<button
// 				onClick={onContinue}
// 				className="inline-block mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition duration-300"
// 			>
// 				–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
// 			</button>
//  {/* =============== –ö–ù–û–ü–ö–ê –î–õ–Ø –û–¢–õ–ê–î–ö–ò ================ end */}

// 		</div>

<div className="loading-page">
      <Image
        src={logoPath}
        width={200}
        height={100}
        alt="Logo"
        className="loading-image"
      />
      <p className="loading-text text-emerald-900">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
      <div className="button-container">
        {/* <button
          onClick={onContinue}
          className="loading-button"
        >
          –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        </button> */}
      </div>
    </div>
	);
};

export default LoadingPage;

// =============================================
// frontend/nextjs-dashboard/app/auth/register/RegisterForm.tsx
'use client';
import { EyeIcon, EyeSlashIcon } from "@heroicons/react/24/outline"; // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω—É–∂–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫
import { useState } from 'react';
import axios from 'axios';
import { usePathname, useSearchParams, redirect } from 'next/navigation';  // –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ö—É–∫–æ–≤
import LoadingPage from '@/app/auth/login/loading';

import { useForm } from 'react-hook-form';

type RegisterFormInputs = {
	username: string;
	first_name: string;
	last_name: string;
	phone_number: string;
	email: string;
	password: string;
	confirm_password: string;
	pin_code: string;
};

const RegisterForm = () => {
	const {
		register,
		handleSubmit,
		watch,
		formState: { errors },
	} = useForm<RegisterFormInputs>();

	const [showPassword, setShowPassword] = useState(false); // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è

	const togglePasswordVisibility = () => {
		setShowPassword((prevState) => !prevState); // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è
	};

	const onSubmit = async (data: RegisterFormInputs) => {
		try {
			const res = await fetch('/api/register/', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify(data),
			});

			if (res.ok) {
				alert('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å');
			} else {
				const result = await res.json();
				alert(result.detail || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
			}
		} catch (err) {
			console.error(err);
			alert('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
		}
	};
	// h-48 max-h-full md:max-h-screen
	return (

		<form onSubmit={handleSubmit(onSubmit)} className="max-w-md mx-auto p-6 bg-amber-50 shadow-2xl rounded-xl">
			<div className="w-md h-[500px] overflow-y-auto beautiful-scroll">
				<h2 className="text-2xl font-semibold mb-6 text-center text-cyan-950">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>

				<div className="mb-4">
					<label
						htmlFor="username"
						className="block text-gray-700 text-sm font-bold mb-1"
					>
						–õ–æ–≥–∏–Ω:
					</label>
					<input
						{...register('username', {
							required: true,
							minLength: { value: 3, message: '–õ–æ–≥–∏–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π' },
							maxLength: { value: 150, message: '–õ–æ–≥–∏–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π' },
						})}
						id="username"
						type="text"
						placeholder="–õ–æ–≥–∏–Ω"
						className="shadow appearance-none border rounded w-full py-2 px-3 bg-stone-100 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-stone-400 focus:border-zinc-600"
					/>
					{errors.username && <span className="text-red-900 mt-1 block">{errors.username.message}</span>}
				</div>

				<div className="mb-4">
					<label
						htmlFor="first_name"
						className="block text-gray-700 text-sm font-bold mb-2"
					>
						–ò–º—è:
					</label>
					<input
						{...register('first_name', {
							required: true,
							minLength: { value: 2, message: '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞' },
						})}
						id="first_name"
						type="text"
						placeholder="–ò–º—è"
						className="shadow appearance-none border rounded w-full py-2 px-3 bg-stone-100 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-stone-400 focus:border-zinc-600"
					/>
					{errors.first_name && <span className="text-red-900 mt-1 block">{errors.first_name.message}</span>}
				</div>

				<div className="mb-4">
					<label
						htmlFor="last_name"
						className="block text-gray-700 text-sm font-bold mb-2"
					>
						–§–∞–º–∏–ª–∏—è:
					</label>
					<input
						{...register('last_name', {
							required: true,
							minLength: { value: 2, message: '–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞' },
						})}
						id="last_name"
						type="text"
						placeholder="–§–∞–º–∏–ª–∏—è"
						className="shadow appearance-none border rounded w-full py-2 px-3 bg-stone-100 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-stone-400 focus:border-zinc-600"
					/>
					{errors.last_name && <span className="text-red-900 mt-1 block">{errors.last_name.message}</span>}
				</div>

				<div className="mb-4">
					<label
						htmlFor="phone_number"
						className="block text-gray-700 text-sm font-bold mb-2"
					>
						–¢–µ–ª–µ—Ñ–æ–Ω:
					</label>
					<input
						{...register('phone_number', {
							required: false,
							pattern: {
								value: /^(\+\d{1,2})?\s?(\d{3})\s?[-.\s]?(\d{3})\s?[-.\s]?(\d{4})$/,
								message: '–¢–µ–ª–µ—Ñ–æ–Ω –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ',
							},
						})}
						id="phone_number"
						type="tel"
						placeholder="+7..."
						className="shadow appearance-none border rounded w-full py-2 px-3 bg-stone-100 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-stone-400 focus:border-zinc-600"
					/>
					{errors.phone_number && <span className="text-red-900 mt-1 block">{errors.phone_number.message}</span>}
				</div>

				<div className="mb-4">
					<label
						htmlFor="email"
						className="block text-gray-700 text-sm font-bold mb-2"
					>
						Email:
					</label>
					<input
						{...register('email', {
							required: true,
							pattern: {
								value: /\S+@\S+\.\S+/,
								message: 'E-mail –≤–≤–µ–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ',
							},
						})}
						id="email"
						type="email"
						placeholder="example@example.com"
						className="shadow appearance-none border rounded w-full py-2 px-3 bg-stone-100 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-stone-400 focus:border-zinc-600"
					/>
					{errors.email && <span className="text-red-900 mt-1 block">{errors.email.message}</span>}
				</div>

				<div className="mb-4 relative">
					<label
						htmlFor="password"
						className="block text-gray-700 text-sm font-bold mb-2"
					>
						–ü–∞—Ä–æ–ª—å:
					</label>
					<input
						{...register('password', {
							required: true,
							minLength: { value: 8, message: '–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π' },
						})}
						id="password"
						type={showPassword ? 'text' : 'password'}  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–ª—è
						placeholder="–ü–∞—Ä–æ–ª—å"
						className="shadow appearance-none border rounded w-full py-2 px-3 bg-stone-100 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-stone-400 focus:border-zinc-600"
					/>
					<div className="absolute inset-y-0 right-0 pr-3 flex items-center"> {/* –£–±–∏—Ä–∞–µ–º pointer-events-none */}
						<button
							type="button"
							onClick={togglePasswordVisibility}
							className="pt-7 cursor-pointer outline-none focus:outline-none"
						>
							{showPassword ? (
								<EyeSlashIcon className="h-5 w-5 text-gray-500" aria-hidden="true" /> // –°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å
							) : (
								<EyeIcon className="h-5 w-5 text-gray-500" aria-hidden="true" /> // –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å
							)}
						</button>
					</div>
					{errors.password && <span className="text-red-900 mt-1 block">{errors.password.message}</span>}
				</div>

				<div className="mb-4 relative">
					<label
						htmlFor="confirm_password"
						className="block text-gray-700 text-sm font-bold mb-2"
					>
						–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è:
					</label>
					<input
						{...register('confirm_password', {
							required: true,
							validate: (value) => value === watch('password') || '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç',
						})}
						id="confirm_password"
						type={showPassword ? 'text' : 'password'}  // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—è
						placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
						className="shadow appearance-none border rounded w-full py-2 px-3 bg-stone-100 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-stone-400 focus:border-zinc-600"
					/>
					<div className="absolute inset-y-0 right-0 pr-3 flex items-center">
						<button
							type="button"
							onClick={togglePasswordVisibility}
							className="pt-7 cursor-pointer outline-none focus:outline-none"
						>
							{showPassword ? (
								<EyeSlashIcon className="h-5 w-5 text-gray-500" aria-hidden="true" />
							) : (
								<EyeIcon className="h-5 w-5 text-gray-500" aria-hidden="true" />
							)}
						</button>
					</div>
					{errors.confirm_password && <span className="text-red-900 mt-1 block">{errors.confirm_password.message}</span>}
				</div>

				<div className="mb-4">
					<label
						htmlFor="pin_code"
						className="block text-gray-700 text-sm font-bold mb-2"
					>
						PIN-–∫–æ–¥ (5 —Ü–∏—Ñ—Ä):
					</label>
					<input
						{...register('pin_code', {
							required: true,
							pattern: {
								value: /^\d{5}$/,
								message: 'PIN-–∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π —Ä–æ–≤–Ω–æ 5 —Ü–∏—Ñ—Ä',
							},
						})}
						id="pin_code"
						type="number"
						placeholder="–í–∞—à PIN-–∫–æ–¥"
						className="shadow appearance-none border rounded w-full py-2 px-3 bg-stone-100 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-stone-400 focus:border-zinc-600"
					/>
					{errors.pin_code && <span className="text-red-900 mt-1 block">{errors.pin_code.message}</span>}
				</div>

				<button
					type="submit"
					className="w-full bg-sky-500 hover:bg-sky-700 text-white font-bold py-2 px-4 rounded"
				>
					–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
				</button>
				<div className="h-48"></div>
			</div>

		</form>
	);
};

export default RegisterForm;



===============
–ë–≠–ö–≠–ù–î (–ö–æ—Ç–æ—Ä—ã–π –≤ —Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
===============

—Ñ–∞–π–ª—ã Django:
–í–°–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –ü–ê–ö–ï–¢–´ –ë–≠–ö–≠–ù–î:
Django	5.2.7	5.2.7
PyJWT	2.10.1	2.10.1
asgiref	3.9.2	3.10.0
django-cors-headers	4.9.0	4.9.0
djangorestframework	3.16.1	3.16.1
djangorestframework_simplejwt	5.5.1	5.5.1
pillow	11.3.0	11.3.0
pip	25.2	25.2
psycopg2-binary	2.9.10	2.9.11
python-dotenv	1.1.1	1.1.1
sqlparse	0.5.3	0.5.3
tzdata	2025.2	2025.2
------------------------

backend/env/...


backend/media/...


backend/my_bathhouse_backend/apps/users/migrations/0001_initial.py

# Generated by Django 5.2.7 on 2025-10-03 23:55
# my_bathhouse_backend/apps/migrations/0001_initial.py
import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('pin_code', models.CharField(blank=True, max_length=5, null=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]

===============================
backend/my_bathhouse_backend/apps/users/migrations/__init__.py
–ü–£–°–¢–û–ô
===============================
backend/my_bathhouse_backend/apps/users/__init__.py
–ü–£–°–¢–û–ô

===============================
backend/my_bathhouse_backend/apps/users/admin.py
from django.contrib import admin

# Register your models here.
===============================
# my_bathhouse_backend/apps/users/api_views.py
'''
–°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (API view),
–æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
'''


from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.permissions import AllowAny
from rest_framework_simplejwt.tokens import RefreshToken
from .serializers import LoginSerializer, UserSerializer


class RegisterAPI(APIView):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    def post(self, request, *args, **kwargs):
        serializer = UserSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({"my_bathhouse_backend/apps/users/api_views.py: "
                             "message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"},
                            status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class LoginAPI(APIView):
    """–ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–¥–∞—ë—Ç —Ç–æ–∫–µ–Ω—ã."""
    permission_classes = [AllowAny]  # –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ö–æ–¥–∞

    def post(self, request, format=None):
        serializer = LoginSerializer(data=request.data)

        if serializer.is_valid():  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã–µ
            token = RefreshToken.for_user(serializer.validated_data['user'])
            return Response({
                'access_token': str(token.access_token),
                'refresh_token': str(token)
            }, status=status.HTTP_200_OK)
        else:
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            errors = serializer.errors

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if 'non_field_errors' in errors:
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É
                message = ', '.join(errors['non_field_errors'])
            elif 'username' in errors or 'password' in errors:
                message = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω—ã –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.'
            else:
                message = '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞.'

            return Response({'detail': message}, status=status.HTTP_400_BAD_REQUEST)

===============================
backend/my_bathhouse_backend/apps/users/apps.py
from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'my_bathhouse_backend.apps.users'

===============================
# my_bathhouse_backend/apps/users/models.py

from django.db import models
from django.contrib.auth.models import AbstractUser

class CustomUser(AbstractUser):
    phone_number = models.CharField(max_length=15, null=True, blank=True)
    pin_code = models.CharField(max_length=5, null=True, blank=True)
      # –ú–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ –æ–ø—Ü–∏–∏
    avatar = models.ImageField(upload_to='avatars/', null=True, blank=True)

# Create your models here.

===============================
backend/my_bathhouse_backend/apps/users/serializers.py
'''
–î–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π
–¥–ª—è Django –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
'''

from rest_framework import serializers
from .models import CustomUser
from django.contrib.auth import authenticate

class UserSerializer(serializers.ModelSerializer):

    # –°–¥–µ–ª–∞–µ–º –ø–æ–ª–µ –∞–≤–∞—Ç–∞—Ä–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
    avatar = serializers.ImageField(required=False)

    class Meta:
        model = CustomUser
        fields = [
            'id',
            'username',
            'first_name',
            'last_name',
            'email',
            'password',
            'phone_number',
            'pin_code',
            'avatar'
        ]
        # –ü–∞—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø–∏—Å–∏
        extra_kwargs = {'password': {'write_only': True}, 'avatar': {'required': False}}

    # ========================
    def validate_first_name(self, value):
        if not value.strip():  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏–º—è –Ω–µ –ø—É—Å—Ç–æ–µ
            raise serializers.ValidationError("# "
                                              "my_bathhouse_backend/apps/users/serializers.py: –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return value

    def validate_last_name(self, value):
        if not value.strip():  # –¢–æ –∂–µ –¥–ª—è —Ñ–∞–º–∏–ª–∏–∏
            raise serializers.ValidationError("my_bathhouse_backend/apps/users/serializers.py: –§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
        return value
    # =========================

    def create(self, validated_data):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        avatar = validated_data.pop('avatar', None)

        user = CustomUser.objects.create_user(
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ username - –ª–æ–≥–∏–Ω
            username=validated_data.get('username'),

            first_name=validated_data.get('first_name'),
            last_name=validated_data.get('last_name'),
            email=validated_data.get('email'),
            password=validated_data.get('password'),
            phone_number=validated_data.get('phone_number'),
            pin_code=validated_data.get('pin_code'),
        )

        if avatar:  # –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            user.avatar = avatar
            user.save(update_fields=['avatar'])

        return user

class LoginSerializer(serializers.Serializer):
    """
    –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    username = serializers.CharField(max_length=255)
    password = serializers.CharField(write_only=True)

    def validate(self, attrs):
        username = attrs.get('username')
        password = attrs.get('password')

        user = authenticate(username=username, password=password)

        if not user or not user.is_active:
            raise serializers.ValidationError("my_bathhouse_backend/apps/users/serializers.py: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

        return {'user': user}

===============================
# my_bathhouse_backend/apps/users/tests.py

from django.test import TestCase

# Create your tests here.

===============================
# my_bathhouse_backend/apps/users/urls.py
'''
–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –º–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ.
'''
from django.urls import path
from .api_views import RegisterAPI, LoginAPI

urlpatterns = [
    path('register/', RegisterAPI.as_view(), name='register_api'),
    path('login/', LoginAPI.as_view(), name='login_api'),
]

===============================

# my_bathhouse_backend/apps/users/views.py
# –î–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–∫–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç HTML-—à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞

from django.shortcuts import render

===============================
backend/my_bathhouse_backend/apps/__init__.py
–ü–£–°–¢–û–ô

===============================
backend/my_bathhouse_backend/__init__.py
–ü–£–°–¢–û–ô

===============================
backend/my_bathhouse_backend/asgi.py
"""
ASGI config for my_bathhouse_backend project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_bathhouse_backend.settings')

application = get_asgi_application()

===============================
# my_bathhouse_backend/settings.py
"""
Django settings for my_bathhouse_backend project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
# my_bathhouse_backend/settings.py
import os
from pathlib import Path
from datetime import timedelta

# from django.conf.global_settings import AUTH_USER_MODEL

# –°–æ–∑–¥–∞–π—Ç–µ –ø—É—Ç–∏ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∞ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –¥–ª—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å)
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')  # –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–æ–∫

# URL –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
MEDIA_URL = '/media/'  # URL –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-bd2td8c*d9pyy3^8$%oko6%ng#=w7_-)x))u2j2kqa&(*@2@-n'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = ['bathhouse-app.ru', 'www.bathhouse-app.ru']
# ALLOWED_HOSTS = ['localhost', '127.0.0.1']
# ['localhost', '127.0.0.1']: –≠—Ç–∏ –¥–≤–∞ –∞–¥—Ä–µ—Å–∞ –æ–∑–Ω–∞—á–∞—é—Ç, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
#   –ø—Ä–∏–º–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ —Å –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).
#   –ö–æ–≥–¥–∞ –≤—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ—Ç–µ —Å–∞–π—Ç –ø—É–±–ª–∏—á–Ω–æ, –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å
#   —Ä–µ–∞–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ
#   (–Ω–∞–ø—Ä–∏–º–µ—Ä, example.com, www.example.com).
ALLOWED_HOSTS = [] # ALLOWED_HOSTS = ["*"] –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è
# —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è


# Application definition

INSTALLED_APPS = [
    # 'my_bathhouse_backend.apps.users.apps.UsersConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    'my_bathhouse_backend.apps.users',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',  # —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–∞ localhost:3000
]

ROOT_URLCONF = 'my_bathhouse_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug', # –¥–æ–±–∞–≤–ª–µ–Ω–æ 14.10.25
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'my_bathhouse_backend.wsgi.application'

ASGI_APPLICATION = 'my_bathhouse_backend.asgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'bathhouse_db',       # –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        'USER': 'bathhouse_user',     # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å PostgreSQL
        'PASSWORD': 'strongpassword', # –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        'HOST': 'localhost',          # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ö–æ—Å—Ç
        'PORT': '5432',               # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç
    }
}

# =========================
# –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Django,
# —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—à–∏–±–æ–∫:

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django.db.backends': {
            'level': 'DEBUG',
            'handlers': ['console'],
        },
    },
}
# =========================

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'users.CustomUser'

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ===================================
# –î–õ–Ø : INSTALLED_APPS = [
#     # –î—Ä—É–≥–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...
#     'rest_framework_simplejwt.token_blacklist',
# ]
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ refresh-—Ç–æ–∫–µ–Ω–∞
}
# ===================================

===============================
backend/my_bathhouse_backend/urls.py
"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è URL –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ my_bathhouse_backend.

–°–ø–∏—Å–æ–∫ `urlpatterns` –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç URL-–∞–¥—Ä–µ—Å–∞ –∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º (views.py).
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏.:
    https://docs.djangoproject.com/en/5.2/topics/http/urls/
–ù–∞–ø—Ä–∏–º–µ—Ä:
–§—É–Ω–∫—Ü–∏–∏ views.py
    1. –î–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç:  from my_bathhouse_backend import views
    2. –î–æ–±–∞–≤—å—Ç–µ URL –≤ urlpatterns:  path('', views.home, name='home')
Class-based (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å) views.py
    1. –î–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç:  from other_app.views import Home
    2. –î–æ–±–∞–≤—å—Ç–µ URL –≤ urlpatterns:  path('', Home.as_view(), name='home')
–í–∫–ª—é—á–∞—è –¥—Ä—É–≥—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é URL
    1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é include(): from django.urls import include, path
    2. –î–æ–±–∞–≤—å—Ç–µ URL –≤ urlpatterns:  path('blog/', include('blog.urls'))
"""

from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
from .views import home          # ( !? –æ—Ç–∫–∏–Ω—É–ª –∏–∑ –∫–æ–¥–∞ : —É–±—Ä–∞–ª —ç—Ç—É —Å—Ç—Ä–æ–∫—É)


urlpatterns = [
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∞—è –ø–∞–Ω–µ–ª—å Django
    path('admin/', admin.site.urls),
    # –í–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    path('api/', include('my_bathhouse_backend.apps.users.urls')),
    # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    path('', home, name='home'), # ( !? –æ—Ç–∫–∏–Ω—É–ª –∏–∑ –∫–æ–¥–∞ : —É–±—Ä–∞–ª —ç—Ç—É —Å—Ç—Ä–æ–∫—É)
]

# –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

===============================
backend/my_bathhouse_backend/views.py
from django.http import HttpResponse

def home(request):
    return HttpResponse("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –º–æ–π —Å–∞–π—Ç –±–∞–Ω—å!")

===============================
backend/my_bathhouse_backend/wsgi.py
"""
WSGI config for my_bathhouse_backend project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_bathhouse_backend.settings')

application = get_wsgi_application()


===============================
backend/__init__.py
–ü–£–°–¢–û–ô

===============================
backend/manage.py
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_bathhouse_backend.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()



==================================
–í—Å–µ —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ:
Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        12.10.2025      4:02                .bin
d-----        12.10.2025      4:02                .pnpm
d-----        08.10.2025     21:11                @heroicons
d-----        08.10.2025     21:11                @tailwindcss
d-----        12.10.2025      4:02                @tanstack
d-----        08.10.2025     21:11                @types
d----l        08.10.2025     21:11                autoprefixer
d----l        12.10.2025      4:02                axios
d----l        08.10.2025     21:11                bcrypt
d----l        08.10.2025     21:11                clsx
d----l        08.10.2025     21:11                next
d----l        08.10.2025     21:11                next-auth
d----l        08.10.2025     21:11                postcss
d----l        08.10.2025     21:11                postgres
d----l        08.10.2025     21:11                react
d----l        08.10.2025     21:11                react-dom
d----l        12.10.2025      4:02                react-hook-form
d----l        08.10.2025     21:11                tailwindcss
d----l        08.10.2025     21:11                typescript
d----l        08.10.2025     21:11                use-debounce
d----l        08.10.2025     21:11                zod
-a----        12.10.2025      4:02          11128 .modules.yaml
-a----        12.10.2025      4:02            607 .pnpm-workspace-state-v1.json




